#!/usr/bin/python
import numpy
import array
import matplotlib.pyplot as plot
import visa
from time import sleep

def scopewrite(str):
    scope.write(str)
    sleep(.2) 

""" Record coincidence events from the PMTs using an external coincidence trigger connected to the scope """
 
# Initialize our scope
print visa.get_instruments_list()
scope = visa.instrument("USB0::0x1AB1::0x0488::DS1BC130900036::INSTR")

scopewrite(':ACQ:MEMD LONG') # Long memory type
scopewrite(':CHAN1:COUP DC') # DC coupling
scopewrite(':CHAN2:COUP DC') # DC coupling
scopewrite(':CHAN3:COUP DC') # DC coupling
scopewrite(':CHAN1:DISP ON') 
scopewrite(':CHAN2:DISP ON') 
scopewrite(':CHAN3:DISP ON') 
scopewrite(':CHAN1:SCAL 5') 
scopewrite(':CHAN2:SCAL 5') 
scopewrite(':CHAN3:SCAL 5') 
#scopewrite(':CHAN1:OFFS 10') 
#scopewrite(':CHAN2:OFFS 0') 
#scopewrite(':CHAN3:OFFS -10') 
scopewrite(':TIM:SCAL .000002') # 2microsec
scopewrite(":TRIG:EDGE:SOUR CHAN1")
scopewrite(':TRIG:EDGE:SWE SING') # Single trigger
scopewrite(':TRIG:EDGE:COUP DC') # DC trigger coupling
scopewrite(':TRIG:EDGE:SLOP NEG') # Trigger on negative edge
scopewrite(':TRIG:EDGE:LEV 2.5') # Trigger at 2.5 volts

scopewrite(":RUN")

#sample_rate = scope.ask_for_values(':ACQ:SAMP?')[0]

#
# Set up triggering parameters
# Add this in once we examine the coincidence unit
#
 
n = 0; # Number of coincidence events

while (n<2):
	# Wait until the scope is triggered:
	scopewrite(":TRIG:STAT?")
	status = scope.read();
	if not status=="T'D":
		#print 'Not triggered!'
		continue
	n = n+1 # Increment the event counter
	
	# Stop data acquisition so that we can take all the data at the same instant
	scopewrite(":STOP")
	
	# Grab the raw data
	#scopewrite(":WAV:POIN:MODE RAW")
	#scopewrite(":WAV:DATA? CHAN1")

        scopewrite(":WAV:POIN:MODE RAW")
        scopewrite(":ACQ:MEMD LONG")
        
        scopewrite(":WAV:DATA? CHAN1")
        rawdata = []
        for i in xrange(100):
            rawdata += scope.read()
            rawdata = ''.join(rawdata)
            data = numpy.frombuffer(rawdata, 'B')

	#rawdata1 = scope.read()
	#scopewrite(":WAV:DATA? CHAN2")
	#rawdata2 = scope.read()
	#scopewrite(":WAV:DATA? CHAN3")
	#rawdata3 = scope.read()
	#scopewrite(":WAV:DATA? CHAN4")
	#rawdata4 = scope.read()

	print "CH1 " , rawdata
	print
        print data
	#print "CH2 " , rawdata2
	#print
	#print "CH3 " , rawdata3
	#print
	#print "CH4 " , rawdata4
	#print
        '''
	# Process the data into numerical form
        if rawdata1!='':
            #data1 = array.array('B', rawdata1[10:])
            #data1 = map(lambda x: x < 128, data1)
            #data1 = numpy.frombuffer(rawdata1, 'B')
            #data1 = data1[range(data1.size-1202, data1.size,2)]
            #data1 = data1 * -1 + 255
            print " CH1 " , data1
            print
        if rawdata2!='':
            data2 = numpy.frombuffer(rawdata2, 'B')
            print "CH2 " , data2
            print
        if rawdata3!='':
            data3 = numpy.frombuffer(rawdata3, 'B')
            print "CH3 " , data3
            print
        if rawdata4!='':
            data4 = numpy.frombuffer(rawdata4, 'B')
            print "CH4 " , data4
            print

	# Every other data point is a blank value -- clear these out
	data1 = data1[range(data1.size-1202,data1.size,2)]
	data2 = data2[range(data2.size-1202,data2.size,2)]
	data3 = data3[range(data3.size-1202,data3.size,2)]
	data4 = data4[range(data4.size-1202,data4.size,2)]

	# Walk through the data, and map it to actual voltages
	# First invert the data (ya rly)

	data2 = data2 * -1 + 255
	data3 = data4 * -1 + 255
	data4 = data4 * -1 + 255
	
	# Now, we know from experimentation that the scope display range is actually
	# 30-229.  So shift by 130 - the voltage offset in counts, then scale to
	# get the actual voltage.

	data1 = (data1 - 130.0 - voltoffset/voltscale*25) / 25 * voltscale
	data2 = (data2 - 130.0 - voltoffset/voltscale*25) / 25 * voltscale
	data3 = (data3 - 130.0 - voltoffset/voltscale*25) / 25 * voltscale
	data4 = (data4 - 130.0 - voltoffset/voltscale*25) / 25 * voltscale
	
	# Now, generate a time axis.  The scope display range is 0-600, with 300 being
	# time zero.
	time = numpy.arange(-300.0/50*timescale, 300.0/50*timescale, timescale/50.0)
	
	# Open a file and record the data
	print 'Saving a coincidence event...'
	f = open('event_' + str(n),'w')
	for x in range(len(time)):
		f.write(str(time[x]) + '\t' + str(data1[x]) + '\t' + str(data2[x]) + '\t' + str(data3[x]) + '\t' + str(data4[x]) + '\n')
	f.close()
	'''	

	# Start data acquisition again
	scopewrite(":RUN")
	# Wait to allow the scope to recover
	sleep(2)

# Put the scope back in local mode and close the handle to the scope
scopewrite(":KEY:FORC")
scopewrite(":KEY:LOCK DISABLE")
scope.close()
